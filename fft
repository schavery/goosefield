#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Usage: fft [count]

# multiply polynomials with various methods.
# steps.
# 1. make sure the polynomials are the same length
# 2. figure out how many points we need to generate (2d+2)
# 3. get the nth roots of unity
# 4. evaluate both p and q at all of the points
# 4a. this is actually the FFT
# 4b. split the polynomial into even and odd parts
# 4c. recurse
# 5. multiply the results together
# 5a. now we have a vector of values of pq: VP
# 5b. Mc = VP
# 5c. c = M^-1 VP
# 6. make the M matrix using the roots of unity
# 7. take the conjugate, divide by number of points
# 8. matrix mult M^-1 and VP
# 9. return result

import numpy as np
import cmath as cm
import math
from sets import Set
import warnings
import random
import sys
import timeit
from multiprocessing import Pool

def main(count):

	puddle = Pool()

	coefficientlimit = 20
	# degreelimits = [10, 20, 50, 100, 200, 500, 1000, 2000]
	degreelimits = [2000]
	# sparsities = [0.01, 0.02, 0.05, 0.1, 0.2, 0.5]
	sparsities = [0.05, 0.1, 0.2, 0.5]

	returnvalues = []

	for dl in degreelimits:
		for s in sparsities:
			p = [random.randint(1,coefficientlimit) for x in xrange(dl)]
			q = [random.randint(1,coefficientlimit) for x in xrange(dl)]

			si = int(math.pow(s, -1))
			sp = list((np.random.rand(dl) * si).astype(int))
			sq = list((np.random.rand(dl) * si).astype(int))

			p = [p[x] * sp[x] for x in xrange(dl)]
			q = [q[x] * sq[x] for x in xrange(dl)]


			# r = puddle.apply_async(foil_timetrial, (p,q,"foil",count,dl,si))
			s = puddle.apply_async(timetrial, (p,q,fft,"fft",count,dl,si))
			# t = puddle.apply_async(timetrial, (p,q,dht,"hartley",count,dl,si))
			u = puddle.apply_async(timetrial, (p,q,naive,"naïve",count,dl,si))
			
			# returnvalues.append(r)
			returnvalues.append(s)
			# returnvalues.append(t)
			returnvalues.append(u)

	puddle.close()
	puddle.join()

	for x in returnvalues:
		print x.get()


# global
memo = {}

def poly_mult(p, q, printOut, func):
	"""Does all set up and calls func to get the values
		of the polynomials at the desired points"""

	# Figure out the degree of the resulting polynomial
	dp = poly_degree(p)
	dq = poly_degree(q)

	result_degree = dp+dq

	# so the number of points we need to evaluate
	points = result_degree + 1

	# to make the recursion simple, make the lengths
	# go to a power of 2

	next2 = 2**next_power_of_2(points)

	while len(q) < next2:
		q.append(0)

	while len(p) < next2:
		p.append(0)

	lenp = len(p)

	# get the wrapper for the points we need to evaluate
	roots = Nthroots(next2)

	# evaluate the points
	VP = func(p, roots)
	VQ = func(q, roots)

	# get p*q for each point
	values = [VP[x]*VQ[x] for x in xrange(lenp)]

	# memoization of M*
	global memo

	# we use the first 10 coefficients of p as key
	key = get_key(p)

	if key in memo.keys():
		M = memo[key]
	else:
		# otherwise create M*
		M = [[0 for x in xrange(lenp)] for x in xrange(lenp)]
		for x in xrange(lenp):
			# Hartley uses reals, not complex.
			if func == dht:
				for xx in xrange(lenp):
					M[x][xx] = roots.kth_real(x * xx)
			else:
				for xx in xrange(lenp):
					M[x][xx] = roots.kth(x * xx)
				M[x] = np.conjugate(M[x])

		if func == dht:
			# we need invert the matrix.
			M = np.linalg.inv(M)

		# store in memo.
		memo[key] = M

	# get the complex coefficients
	c = np.dot(M, values)

	# there is a warning about the copysign call dropping the
	# imaginary part of the complex number, so I hide it.
	warnings.simplefilter("ignore")

	result = []
	for x in c:
		sign = int(math.copysign(1, x))
		if func == dht:
			mag = int(round(abs(x)))
		else:
			mag = int(round(abs(x)/lenp))
		result.append(sign * mag)

	result = remove_trailing_zeros(result) 

	if printOut == True:
		print result
	else:
		return result

def get_key(p):
	"""Create index into memoization"""
	key = ''
	for i,x in enumerate(p):
		if i < 10:
			key += str(x)
		else:
			break

	return key


def remove_trailing_zeros(p_array):
	"""Takes off the last zeros so we can compare"""
	backwards = reversed(p_array)
	for x in backwards:
		if x == 0:
			p_array.pop()
		else:
			break

	if len(p_array) == 0:
		return [0]


def next_power_of_2(int):
	"""Gives the exponent of power of 2 larger than `int`"""
	n = 1
	while 2**n < int:
		n += 1

	return n


def poly_degree(p_array):
	"""Return the index of the highest non-zero element of p_array"""
	for x in xrange(len(p_array), 0, -1):
		if p_array[x-1] != 0:
			return x-1
	return 0


def correctness(p,q,func):
	"""Compare the output of FOIL with the output of func"""
	known = poly_mult_FOIL(p,q,False)
	unknown = poly_mult(p,q,False,func)
	if known == unknown:
		return True
	else:
		print "Correctness could not be verified."
		print "Expected: " + str(known)
		print "Got: " + str(unknown)


def timetrial(p,q,func,name,count,deg,sparsity):
	"""Run the multiplication with func count times
		and print out the time required"""
	start = timeit.default_timer()
	for x in xrange(count):
		poly_mult(p,q,False,func)

	elapsed = timeit.default_timer() - start
	return name+','+str(deg)+','+str(sparsity)+','+str(round(elapsed/count, 4))


def foil_timetrial(p,q,name,count,deg,sparsity):
	"""Time trial for FOIL method
		slightly different function signature
		means different method is required"""
	start = timeit.default_timer()
	for x in xrange(count):
		poly_mult_FOIL(p,q,False)

	elapsed = timeit.default_timer() - start
	return name+','+str(deg)+','+str(sparsity)+','+str(round(elapsed/count, 4))


def poly_mult_FOIL(p, q, printOut):
	"""This method is _way_ faster than the fft mult
		because it doesn't waste time with the matrix"""
	v = [0 for x in xrange(len(p)+len(q))]

	for idx,x in enumerate(p):
		for idy,y in enumerate(q):
			v[idx+idy] += x*y

	v = remove_trailing_zeros(v)

	if printOut == True:
		print v
	else:
		return v


def dht(p, omega):
	"""Discrete Hartley Transform
		Also known as the Fast Hartley Transform
		Interesting fact: FHT is patented by Stanford U"""
	if len(p) == 1:
		return p
	else:
		# first, split p into evens and odds
		pe, po = [], []
		for idx, val in enumerate(p):
			if idx % 2 == 0:
				pe.append(val)
			else:
				po.append(val)

		# the next iteration needs w^2
		omega_squared = omega.sq()

		U = dht(pe, omega_squared)
		W = dht(po, omega_squared)

		V = [0 for x in xrange(len(p))]

		for x in xrange(len(p) / 2):
			V[x] = U[x] + omega.kth_real(x)*W[x]
			V[x + len(p) / 2] = U[x] - omega.kth_real(x)*W[x]

		return V

def naive(p, roots):
	"""Naive method for evaluating p at the points in roots"""
	V = [0 for x in xrange(roots.n)]
	for root in xrange(roots.n):
		for e,c in enumerate(p):
			V[root] += c * roots.kth(root * e)

	return V

def fft(p, omega):
	"""Seems like it's based on the Cooley Tukey implementation
		DFT = Discrete Fourier Transform"""
	if len(p) == 1:
		return p
	else:
		# first, split p into evens and odds
		pe, po = [], []
		for idx, val in enumerate(p):
			if idx % 2 == 0:
				pe.append(val)
			else:
				po.append(val)

		# the next iteration needs w^2
		omega_squared = omega.sq()

		U = fft(pe, omega_squared)
		W = fft(po, omega_squared)

		V = [0 for x in xrange(len(p))]

		for x in xrange(len(p) / 2):
			V[x] = U[x] + omega.kth(x)*W[x]
			V[x + len(p) / 2] = U[x] - omega.kth(x)*W[x]

		return V


class Nthroots(object):
	"""store and work on the values of the nth roots of unity"""

	def __init__(self, n):
		self.n = n

	def w(self):
		return 2 * math.pi / self.n

	def n(self):
		return self.n

	def kth(self, k):
		# uses polar notation to get the complex coordinates
		# of k*2π/n radians on unit circle
		theta = 2 * k * math.pi / self.n
		return cm.cos(theta) + cm.sin(theta) * 1j

	def kth_real(self, k):
		"""The FHT uses real values, not complex."""
		theta = 2 * k * math.pi / self.n
		return math.cos(theta) + math.sin(theta)

	def kth_exp(self, k):
		"""The formulas for the DFT algorithm, especially the 
			Cooley Tukey implementation, show the `twiddle` factor
			in exponential form, with a negative exponent.

			This conflicts with the `kth` method, which would
			use a positive exponent, if it were in that form instead
			of polar.

			The results of using the negative angle seem to be that
			the last n-1 values in the polynomial come out in reversed
			ordering, which seems to fit because I've seen some
			explanations of the DFT use reverse bit ordering"""

		theta = 2 * k * math.pi / self.n
		return cm.exp(-theta * 1j)

	def sq(self):
		# doubles the angle omega
		# returns new instance
		new_n = self.n / 2
		return self.__class__(new_n)

	def __str__(self):
		return '2π/' + str(self.n)

	def __repr__(self):
		return repr(self.__str__())


if __name__ == "__main__":
	# you can pass in the number of rounds to evaluate
	if len(sys.argv) > 1:
		main(int(sys.argv[1]))
	else:
		print "Specify the number of rounds."
		# main(2)
